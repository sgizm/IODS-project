Rating=c(
userinf.mgr,
userinf.uxd,
userinf.dev,
userinf.tst,
userinf.arc,
userinf.ops,
userinf.slf))
ggplot(data=userinf, aes(x=Statement, y=Rating, fill=Statement)) +
geom_boxplot() + guides(fill=FALSE) + coord_flip()
# 2.4 How often do you use the following ways to get information about users?
infofreq <- data.frame(Statement=factor(rep(infofreq.statements, each=length(infofreq.O1))),
Rating=c(
infofreq.O1,
infofreq.O2,
infofreq.O3,
infofreq.O4))
ggplot(data=infofreq, aes(x=Statement, y=Rating, fill=Statement)) +
geom_boxplot() + guides(fill=FALSE) + coord_flip()
# 3.1 Does your company conduct experiments involving the users?
ggplot(data, aes(x=condexp)) +
geom_bar(fill="#FF9999", colour="#FF9999") +
labs(x="Conducting experiments", y="Frequency")
# 3.3 Below are three pairs of statements about collecting data for understanding user needs. How much do you agree with each statement?
understanding <- data.frame(Statement=factor(rep(understanding.statements, each=length(understanding.S1))),
Rating=c(
understanding.S1,
understanding.S2,
understanding.S3,
understanding.S4,
understanding.S5,
understanding.S6))
ggplot(data=understanding, aes(x=Statement, y=Rating, fill=Statement)) +
geom_boxplot() + guides(fill=FALSE) + coord_flip()
# 4.1 How much do you agree with the following statements regarding notifying users about experiments? Please answer according to your personal beliefs.
undernotif <- data.frame(Statement=factor(rep(usernotif.statements, each=length(usernotif.S1))),
Rating=c(
usernotif.S1,
usernotif.S2,
usernotif.S3,
usernotif.S4,
usernotif.S5,
usernotif.S6,
usernotif.S7))
ggplot(data=undernotif, aes(x=Statement, y=Rating, fill=Statement)) +
geom_boxplot() + guides(fill=FALSE) + coord_flip()
# 4.2 How much do you agree with the following statements about involving users in experiments? Please answer according to your personal beliefs.
expinv <- data.frame(Statement=factor(rep(expinv.statements, each=length(expinv.S1))),
Rating=c(
expinv.S1,
expinv.S2,
expinv.S3,
expinv.S4,
expinv.S5,
expinv.S6,
expinv.S7))
ggplot(data=expinv, aes(x=Statement, y=Rating, fill=Statement)) +
geom_boxplot() + guides(fill=FALSE) + coord_flip()
## CROSS-ANALYSIS ##
#Team size vs. job functions
aa <- table(data$jobfunction, data$teamsize)
aa <- data.frame(aa)
ggplot(aa,aes(x=Var2,y=Freq,fill=Var1))+geom_bar(stat="identity") + labs(x="Team size",y="Frequencies")
gplot(aa,aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job functions",y="Frequencies") + scale_fill_brewer(palette="Set1") + scale_fill_discrete(name="Team size") #it is better
#bb <- aa[-c(36:42), ] #no team rowlardan kurtulmaca
##Hala teamsize vs. jobfunctions buble
#ggplot(bb, aes(x = Var2, y = Var1, size=Freq)) +
geom_point(shape=21, colour = "#000000", fill = "#FF9999") + scale_size_continuous(range = c(0, 30)) +
labs(x = "Teamsize", y = "Job Functions") + scale_fill_continuous(low = "#000000", high = "#FF9999")
#Gender vs. job functions
ab <- table(data$jobfunction, data$gender)
ab <- data.frame(ab)
ggplot(head(ab,14),aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders") #took first 14 row to avoid people who does not tell which gender they are
#Activities
cc <- table(data$jobfunction, data$useractivities.after.release)
cc<-data.frame(cc)
ccc <- cc[cc$Var2 == "TRUE",]
ggplot(ccc, aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job functions",y="Frequencies", title="People who marked 'Activities After Release' for user involvement activities") + theme(plot.title = element_text(hjust = 0.5))+guides(fill=FALSE) + theme(plot.title = element_text(lineheight=.6))
#cde<-melt(cc, id.vars='Var1', measure.vars = c('Var2', 'Var3'))
#cde<-data.frame(cde)
#cde <- cde[cde$value == "TRUE",]
#ggplot(cde, aes(Var1,value)) + geom_point() + stat_smooth()
#table(data[, 3], data[, 9:14])#boyle yaparak jobfunction columniylan activities boolean columnlarini merge edeip bir seyler yapacaktim ama ayni length degil diyor
#e basit NA leri pairwise omit edeceksin
#the one below was going to be good but did not work
ggplot(data,aes(x=data$useractivities.specifying.requirements))+ geom_bar(stat="identity") + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) +  labs(x = "", y = "") + facet_wrap(~data$jobfunction)
##2.2 how much do you agree with following statements
ggplot(userinv,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
jb_names <- c(
'Developing software' = "Developers",
'Testing software' = "Testers",
'UX Design' = "UX designers",
'jobfunction#4' = "Mng",
'jobfunction#5' = "The",
'jobfunction#6' = "The O",
'jobfunction#7' = "The Ot"
)
ggplot(userinv,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction, labeller = as_labeller(jb_names)) +  labs(x = "", y = "") #Bu oldu
#How easy 2.3 (userinf)
yak <- cbind(userinf.mgr, userinf.uxd, userinf.dev, userinf.tst, userinf.arc, userinf.ops, userinf.slf, jobfunction)
#df <- melt(yak, id.vars='jobfunction') #created a 'tall' column with jobfunction on one column and its values vs. other variables i.e. userinf
fff<-melt(yak, id.vars='jobfunction', measure.vars = c('userinf.mgr', 'userinf.uxd', 'userinf.dev', 'userinf.tst', 'userinf.arc', 'userinf.ops', 'userinf.slf'))
fff <-data.frame(fff)
ggplot(fff, aes(x=jobfunction, y=value, fill=variable)) + geom_bar(stat='identity') # bu calisti ama okumasi cok zor bir graph oldu
ggplot(fff, aes(jobfunction,value, col=variable)) + geom_point() + stat_smooth() + scale_colour_discrete(name  ="how easy it is for", breaks=c("userinf.mgr"), labels=c("manager")) # bu da enteresan bir sey verdi
#one below is the facet warp
ggplot(userinf,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
#ggplot(yak, aes(x=jobfunction,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders")
ggplot(data,aes(x=jobfunction,y=data$userinf.slf, fill=jobfunction))+geom_boxplot() + scale_fill_brewer(palette="PuBu") + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'How easy it is to get information from users - myself'")
ggplot(data,aes(x=jobfunction,y=data$userinf.dev, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'How easy it is to get information from users - developers'")
ggplot(data,aes(x=jobfunction,y=data$userinf.ops, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'How easy it is to get information from users - operators'")
ggplot(data,aes(x=jobfunction,y=data$userinf.uxd, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'How easy it is to get information from users - UX designers'")
#with(data[data$jobfunction == "Management",], #olmadi sadece managerlarin ne dusundugune bakacaktim. subset eyleyemedim
#ggplot(data,aes(x=jobfunction,y=data$userinf.uxd, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'How easy it is to get information from users - UX designers'")
#How often 2.4 (infofreq)
#bu olmaz. neden cunku rankinglerin onemi var
#aha <- table(data$jobfunction, data$infofreq.O3)
#aha <- data.frame(aha)
#ggplot(aha, aes(x=Var1, y=Freq, fill=Var2))+geom_bar(stat="identity", colour = "#000000", fill = "#FF9999") + labs(x="Roles" ,y="Frequencies") + guides(fill=FALSE)  + ggtitle("the ones who marked 'I interact with users in person after they used the sw") + theme(plot.title = element_text(lineheight=.6))
ggplot(data,aes(x=jobfunction,y=data$infofreq.O3, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'I interact with users in person after they used the software'")
ggplot(data,aes(x=jobfunction,y=data$infofreq.O1, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'I remotely observe users when they are using the sw e.g., screen sharing'")
ggplot(data,aes(x=jobfunction,y=data$infofreq.O4, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'through recorded usage data e.g., log data or video'")
ggplot(data,aes(x=jobfunction,y=data$infofreq.O2, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Their current job function",y="'People who marked: 'I am physically present with users when they are using the sw e.g., talk-aloud study'")
ggplot(infofreq,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
#Roles over "I need to ask permission"
ggplot(data,aes(x=jobfunction,y=data$userinv.S2, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Roles",y="'I need to ask permission to contact users'")
#Roles over "I have sufficient info"
ggplot(data,aes(x=jobfunction,y=data$userinv.S4, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Roles",y="'I have sufficient information about users'")
#ggplot(data,aes(x=jobfunction,y=data$userinv.S4, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip()+ labs(x="Roles",y="'I have sufficient information about users'")  + scale_x_discrete(breaks=c("1", "2", "3", "4", "5"), labels= ("Completely disagree", "2", "3", "4", "Completely agree"))
#yok burda boxplot daha mantikli oluyor ustteki yani
#cd <- table(data$jobfunction, data$userinv.S4)
#cd<-data.frame(cd)
#ccc <- cc[cc$Var2 == "TRUE",]
#ggplot(cd, aes(x=Var2,y=Freq,fill=Var1))+geom_bar(stat="identity") + labs(x="",y="Roles") + guides(fill=FALSE) + ggtitle("the ones who marked 'the Activities After Release' for user involvement activities") + theme(plot.title = element_text(lineheight=.6))
#3.1. How often conduct experiments
#iki turlu de olur gibi. dusun. ikinci graphtan i dont know cikarilabilir
ahan <- table(data$jobfunction, data$condexp)
ahan <- data.frame(ahan)
ggplot(ahan, aes(x=Var2, y=Freq, fill=Var1))+geom_bar(stat="identity") + labs(x="Roles" ,y="Frequencies")
ggplot(ahan, aes(x=Var1, y=Freq, fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions" ,y="Frequencies") + scale_fill_discrete(name="Statements")+ scale_fill_brewer(palette="YlGnBu")#better
#PAIRS 3.2
#boyle yapacaksan oynaman lazim legendlarla falan ve diger pairlere uygula
ggplot(data,aes(x=data$understanding.S1,y=data$understanding.S2,color=jobfunction))+geom_point() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~jobfunction, scales="free_y") +  labs(x = "People who ranked 'data should be always collected'", y = "People who ranked 'data should be only collected when there is a known need'") + scale_fill_continuous(low = "#000000", high = "#FF9999")
ggplot(data,aes(x=data$understanding.S3,y=data$understanding.S4,color=jobfunction))+geom_point() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~jobfunction, scales="free_y") +  labs(x = "People who ranked 'all data about user behaviour is useful'", y = "People who ranked 'focused data on specifically chosen user action is useful'") + scale_fill_continuous(low = "#000000", high = "#FF9999")
ggplot(data,aes(x=data$understanding.S5,y=data$understanding.S6,color=jobfunction))+geom_point() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~jobfunction, scales="free_y") +  labs(x = "People who ranked 'users themselves must be actively involved in the development'", y = "People who ranked 'we just need to measure user behaviour'") + scale_fill_continuous(low = "#000000", high = "#FF9999")
ggplot(understanding,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
#melt lost here... down does not work
hop <- cbind(understanding.S1, understanding.S2, jobfunction)
data.frame(hop)
d2<-melt(hop, id.vars='jobfunction', variable.name = c('understanding.S1', 'understanding.S2'),
value.name = "jobfunction", measure.vars = , na.rm = TRUE)
data.frame(d2)
ggplot(d2, aes(jobfunction,value, col=variable)) + geom_point() + stat_smooth() + scale_colour_discrete(name  ="how easy it is for", breaks=c("userinf.mgr"), labels=c("manager")) # bu da enteresan bir sey verdi
##ETHICS
#4.1 one below is ok but colors to be changed
cz <- table(data$jobfunction, data$usernotif.S1)
cz<-data.frame(cz)
ggplot(cz, aes(x=Var2,y= Freq, fill=Var1))+geom_bar(stat="identity") + labs(x="Roles",y="Frequencies") + scale_fill_discrete(name="Roles")
#the one below is goodie
ggplot(data,aes(x=jobfunction,y=data$usernotif.S1, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Roles",y="'Users do not need to know they they are involved'")
#second one below works
#ggplot(undernotif,aes(x=Statement,y=Rating))+ geom_boxplot() + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") + scale_fill_continuous(low = "#000000", high = "#FF9999")
ggplot(undernotif,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
#4.2
ggplot(expinv,aes(x=Statement,y=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
##Correlations##
pp <- table(gender, jobfunction)
pp<- cor(pp, use="pairwise.complete.obs") # works
cor(age, data$X1.1.Which.of.the.following.most.closely.matches.your.primary.job.function..) #gives -0.16 no real correlation
corrplot(pp, method = "color")
cor(age, worktime, use="pairwise.complete.obs") #0.22
M <-cor(table(age, worktime), use="pairwise.complete.obs")
corrplot(M, method = "color") #plot matrix #does not say much
cor(data$X1.5.What.is.the.size.of.your.primary.work.team.., X1.1.Which.of.the.following.most.closely.matches.your.primary.job.function.., use="pairwise.complete.obs") #0.53
cor(data$userinv.S2, userinf.slf, use="pairwise.complete.obs") # -0.5516735
cor(userinf.dev, userinf.tst, use="pairwise.complete.obs") #0.8996517 #means that users and testers seem to be similar
cor(infofreq.O3, userinv.S3, use="pairwise.complete.obs") #0.6878795
cor(usernotif.S5, usernotif.S4, use="pairwise.complete.obs") #-0.6001068
cor(userinv.S5, userinv.S6, use="pairwise.complete.obs") #0.7812353
or(understanding.S1, understanding.S3, use="pairwise.complete.obs") #0.7302549
#aggreegated function checking all corr among numerical variables
roles <- X1.1.Which.of.the.following.most.closely.matches.your.primary.job.function..
corr_subset <- data[, 58:100]
corr_subset$roles = roles
gender_n <- as.numeric(data$X1.4.Which.of.the.following.best.describes.you..) #converting gender factor to numeric and appending to the dataset
corr_subset$gender = gender_n
corr_subset <- corr_subset[ ,c(ncol(corr_subset),1:(ncol(corr_subset)-1))] #add roles column and bring it to the front
numeric_subset <- corr_subset[sapply(corr_subset, is.numeric)]
numeric_subset_corr<-cor(numeric_subset, use="pairwise.complete.obs")
corrplot(numeric_subset_corr, method= "color", order="hclust", addrect=8)
#scatterplots
ggplot(numeric_subset_corr, aes(x=numeric_subset_corr$userinf.tst, y=numeric_subset_corr$userinf.dev)) +
geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE)    # Don't add shaded confidence region
numeric_subset_corr <- data.frame(numeric_subset_corr)
pairs(numeric_subset_corr[1:4])
pairs(numeric_subset_corr[6:11]) #2.2. How much do you agree with the following statements? (User involvement statements)
pairs(numeric_subset_corr[6:11]) #2.2. How much do you agree with the following statements? (User involvement statements)
pairs(numeric_subset_corr[12:18]) #2.3 In your experience, how easy is it for the following to get information from users?
ggplot(numeric_subset_corr, aes(x=numeric_subset_corr$userinf.tst, y=numeric_subset_corr$userinf.dev)) +
geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE)    # Don't add shaded confidence region
pairs(numeric_subset_corr[12:18]) #2.3 In your experience, how easy is it for the following to get information from users?
corrplot(numeric_subset_corr, method= "color", order="hclust", addrect=8)
numeric_subset_corr<-cor(numeric_subset, use="pairwise.complete.obs")
M <-cor(table(age, worktime), use="pairwise.complete.obs")
corrplot(M, method = "color") #plot matrix #does not say much
ggplot(understanding,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
summary(jobfun)
summary(jobfunctions)
summary(jobfunction)
ggplot(data, aes(x=gender)) +
geom_bar(fill="#FF9999", colour="#FF9999") +
labs(x="Gender", y="Frequency")
ggplot(head(ab,14),aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders") #took first 14 row to avoid people who does not tell which gender they are
VIew(aba)
VIew(ab)
View(ab)
ggplot(head(ab,21),aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders") #took first 14 row to avoid people who does not tell which gender they are
ggplot(head(ab,14),aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders") #took first 14 row to avoid people who does not tell which gender they are
ab <- table(jobfunction, data$gender)
ab <- data.frame(ab)
ggplot(head(ab,14),aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders") #took first 14 row to avoid people who does not tell which gender they are
ab <- table(jobfunction, data$gender)
ab <- data.frame(ab)
ggplot(head(ab,14),aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders") #took first 14 row to avoid people who does not tell which gender they are
ab <- table(data$jobfunction, data$gender)
ab <- data.frame(ab)
ggplot(head(ab,14),aes(x=Var1,y=Freq,fill=Var2))+geom_bar(stat="identity") + labs(x="Job Functions",y="Frequencies") + scale_fill_discrete(name="Genders") #took first 14 row to avoid people who does not tell which gender they are
data$jobfunction
summary(data$jobfunction)
ggplot(userinv,aes(x=Statement,y=Rating, fill=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction, labeller = as_labeller(jb_names)) +  labs(x = "", y = "") #Bu oldu
ggplot(expinv,aes(x=Statement,y=Rating))+ geom_boxplot(aes(fill = Statement)) + guides(fill=FALSE) + coord_flip() + scale_size_continuous(range = c(0, 70)) + facet_wrap(~data$jobfunction) +  labs(x = "", y = "") #Bu oldu
ggplot(data,aes(x=jobfunction,y=data$usernotif.S1, fill=jobfunction))+geom_boxplot() + guides(fill=FALSE) + coord_flip() + labs(x="Roles",y="'Users do not need to know they they are involved'")
ggplot(cz, aes(x=Var2,y= Freq, fill=Var1))+geom_bar(stat="identity") + labs(x="Roles",y="Frequencies") + scale_fill_discrete(name="Roles")
ggplot(data=undernotif, aes(x=Statement, y=Rating, fill=Statement)) +
geom_boxplot() + guides(fill=FALSE) + coord_flip()
getwd()
set("/USers/yaman/Desktop/Open Data Science/IODS-project/data")
set("/Users/yaman/Desktop/Open Data Science/IODS-project/data")
setwd("/Users/yaman/Desktop/Open Data Science/IODS-project/data")
getwd()
data <- read.table(student-mat.csv) #reading the table
data <- read.csv(student-mat.csv) #reading the table
data <- read.csv("student-mat.csv") #reading the table
data1 <- read.csv("student-mat.csv") #reading the table
data1 <- read.csv("student-mat.csv") #reading the csv
data2 <- read.csv("student-por.csv") #reading
data.frame(data1)
data.frame(data2)
dim(data1) #dimensions of the data which happens to be 183 * 60
str(data1) #structure of data with mostly integer variables and a factor
dim(data2) #dimensions of the data which happens to be 395 * 1
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(data1, data2, by = join_by, suffix = c(".math", ".por"))
# see the new column names
colnames(math_por)
# glimpse at the data
glimpse(math_por)
library(dplyr)
library(GGally)
library(ggplot2)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(data1, data2, by = join_by, suffix = c(".math", ".por"))
# see the new column names
colnames(math_por)
# glimpse at the data
glimpse(math_por)
package.instakk("dplyr")
package.install("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
data1 <- read.csv("student-mat.csv") #reading the csv
data2 <- read.csv("student-por.csv") #reading
data.frame(data1)
data.frame(data2)
dim(data1) #dimensions of the data which happens to be 395 * 1
str(data1) #structure of data
dim(data2) #dimensions of the data which happens to be 649 * 1
str(data2) #structure of data
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(data1, data2, by = join_by, suffix = c(".math", ".por"))
# see the new column names
colnames(math_por)
# glimpse at the data
glimpse(math_por)
math_por <- inner_join(data1, data2, by = join_by, suffix = c(".data1", ".data2"))
# see the new column names
colnames(math_por)
# glimpse at the data
glimpse(math_por)
colnames(math_por)
str(data2) #structure of data
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
library(dplyr)
library(GGally)
library(ggplot2)
data1 <- read.csv("student-mat.csv", sep = ";", header = TRUE) #reading the csv
data2 <- read.csv("student-por.csv", sep = ";", header = TRUE) #reading
data.frame(data1)
data.frame(data2)
dim(data1) #dimensions of the data which happens to be 395 * 1
str(data1) #structure of data
dim(data2) #dimensions of the data which happens to be 649 * 1
str(data2) #structure of data
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(data1, data2, by = join_by, suffix = c(".data1", ".data2"))
# see the new column names
colnames(math_por)
glimpse((math_por)
glimpse((math_por)
glimpse((math_por)
glimpse(math_por)
glimpse(math_por)
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of("school",   "sex",      "age",      "address",  "famsize",  "Pstatus" , "Medu",     "Fedu",     "Mjob",     "Fjob",     "reason",   "nursery", "internet"))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# create a new data frame with only the joined columns
alc <- select(math_por, one_of("school",   "sex",      "age",      "address",  "famsize",  "Pstatus" , "Medu",     "Fedu",     "Mjob",     "Fjob",     "reason",   "nursery", "internet"))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(data1)[!colnames(data1) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse(alc)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
write.csv(alc, file = "alc.csv", row.names = FALSE)
alc2 <- read.csv("learning2014.csv", sep=",", header=TRUE)
# checking if it is in the right format
str(alc2)
dim(alc2)
alc2 <- read.csv("alc.csv", sep=",", header=TRUE)
# checking if it is in the right format
str(alc2)
dim(alc2)
colnames(alc2)
ggplot(alc2, aes(x = high_use, y = absences, col=sex))
ggplot(alc, aes(x = high_use, y = G3, col=sex))
ggplot(alc2, aes(x = high_use, y = G3, col=sex))
ggplot(alc2, aes(x = high_use, y = absences, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = G3, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = absences, col=sex)) + geom_boxplot()
high_use
alc2$high_use
View(alc2)
ggplot(alc2, aes(x = high_use, y = absences, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = G3, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = age, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = failures, col=sex)) + geom_boxplot()
typeof(failures)
typeof(alc2$failures)
alc2$failures
ggplot(alc2, aes(x = high_use, y = failures, col=sex)) + geom_bar()
ggplot(alc2, aes(x = high_use, y = failures, col=sex))
ggplot(alc2, aes(x = high_use, y = failures, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = failures, col=sex)) + geom_point()
ggplot(alc2, aes(x = high_use, y = failures, col=sex)) + geom_line()
typeof((alc2$high_use))
ggplot(alc2, aes(x = high_use, y = failures) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = failures) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = failures)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = failures, col=sex)) + geom_boxplot()
m <- glm(high_use ~ G3 + absences + sex, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
aa <- table(high_use, G3)
aa
cross1 <- table(high_use, G3)
getwd()
cross1 <- table(alc2$high_use, alc2$sex)
corss1
cross1
plot(cross1)
ggplot(cross1) + geom_bar()
ggplot(alc2, aes(x = high_use, y = failures, col=sex)) + geom_boxplot()
summary(m)
coef(m)
# find the model with glm()
m <- glm(high_use ~ G3 + absences + sex + age, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
m2<-glm(high_use ~ absences + sex, data=alc2, family="binomial")
#Predict() the probability of high_use
probabilities<-predict(m2, type="response")
#Add the predicted probabilities to 'alc2'
alc<-mutate(alc2, probability=probabilities)
#Use the probabilities to make a prediction of high_use
alc2<-mutate(alc2, prediction=probability>0.5)
#Tabulate the target variable versus the predictions
table(high_use=alc2$high_use, prediction=alc2$prediction)
m <- glm(high_use ~ G3 + absences + sex + age, data = alc2, family = "binomial")
# print out a summary of the model
summary(m)
#according to the summary, absenses and sex seem to be correlated with high alcohol usage with p value being less than 0.05, where as grades and age is not significantly interesting
# print out the coefficients of the model
coef(m)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
cbind(OR, CI)
m2<-glm(high_use ~ absences + age, data=alc2, family="binomial")
#Predict() the probability of high_use
probabilities<-predict(m2, type="response")
#Add the predicted probabilities to 'alc2'
alc<-mutate(alc2, probability=probabilities)
#Use the probabilities to make a prediction of high_use
alc2<-mutate(alc2, prediction=probability>0.5)
#Tabulate the target variable versus the predictions
table(high_use=alc2$high_use, prediction=alc2$prediction)
m2<-glm(high_use ~ absences + age, data=alc2, family="binomial")
#Predict() the probability of high_use
probabilities <- predict(m2, type="response")
#Add the predicted probabilities to 'alc2'
alc2<-mutate(alc2, probability = probabilities)
#Use the probabilities to make a prediction of high_use
alc2<-mutate(alc2, prediction = probability>0.5)
#Tabulate the target variable versus the predictions
table(high_use=alc2$high_use, prediction=alc2$prediction)
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
g + geom_point()
g <- ggplot(alc2, aes(x = probability, y = high_use, col = prediction))
g + geom_point()
ggplot(alc2, aes(x = probability, y = high_use, col = prediction)) + geom_point()
table(high_use = alc2$high_use, prediction = alc2$prediction) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc2high_use, prob = alc2$probability)
loss_func(class = alc2$high_use, prob = alc2$probability)
installed.packages("boot")
install.packages("boot")
library(boot)
cv <- cv.glm(data = alc2, cost = loss_func, glmfit = m2, K = 10)
# average number of wrong predictions in the cross validation
cv$delta[1]
loss_func(class = alc2$high_use, prob = alc2$probability)
ggplot(alc2, aes(x = high_use, y = G3, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = absences, col=sex)) + geom_boxplot()
ggplot(alc2, aes(x = high_use, y = age, col=sex)) + geom_boxplot()
```{r}
summary(m)
```
summary(m)
coef(m)
cbind(OR, CI)
table(high_use=alc2$high_use, prediction=alc2$prediction)
ggplot(alc2, aes(x = probability, y = high_use, col = prediction)) + geom_point()
table(high_use = alc2$high_use, prediction = alc2$prediction) %>% prop.table() %>% addmargins()
table(high_use = alc2$high_use, prediction = alc2$prediction) %>% prop.table() %>% addmargins()
